#!/usr/bin/env node

var	fs		= require('fs'),
	paramon		= require('paramon'),
	jspp		= require('javascript-plusplus'),
	compiler	= global.compiler;

function jsparse () {
	return jspp.narcissus.jsparse.apply(jspp.narcissus, arguments);
}

var format = {
	BOLD : '\u001b[0;1m',
	GREEN: '\u001b[0;32m',
	RED  : '\u001b[0;31m',
	REDBG: '\u001b[0;41m',
	RESET: '\u001b[0m'
};

var args = paramon.readFormat(process.argv, {
	name:	"js++",
	usage:	"js++ file(s) [options]",
	params:	[
		{
			name:		'scope',
			args:		['--scope', '-s'],
			desc:		'Creates a scope.',
			maxParams:	0,
		},
		{
			name:		'debug',
			args:		['--debug', '-d'],
			desc:		'Compile in debug mode.',
			maxParams:	0,
		},
		{
			name:		'warnings',
			args:		['--warnings', '-w'],
			desc:		'Display warnings.',
			maxParams:	0,
		},
		{
			name:		'encoding',
			args:		['--encoding', '-e'],
			desc:		'The encoding to use for reading the files.',
			maxParams:	1,
			minParams:	1,
		},
		{
			name:		'output',
			args:		['--output', '-o'],
			desc:		'The output target. Default=-',
			maxParams:	1,
			minParams:	1,
		}
	],
});

args.debug || process.on('uncaughtException', function (e) {
	//Display the error message
	console.log('[' + format.RED + 'ERROR' + format.RESET + '] ' + (e.message || ""));

	process.exit(1);
});

if (!args['$!stray'].length) {
	throw Error("No files specified.");
}

/* Heavy async soup */

function Dummy(){}
Dummy.prototype.toString = function () {
	return this.r;
};
Dummy.prototype.r = '';

var asReady = 0;

function ready () {
	if (++asReady !== files.length) return;

	/* All files ready, let's get going */

	var code = files.join('\n');

	var t = Date.now();

	var filename = args["output"] || '-';

	//Wrap the compilation code in a try/catch so we can manually output
	//compile errors
	try {
		var c = new compiler(jsparse(code), {
			debug:		args["debug"],
			nowrap:		args["scope"],
			warnings:	args["warnings"]
		});

		c.preprocess();

		var output = c.compile();

		console.log(
			'[' + format.GREEN + 'OK' + format.RESET + '   ] ' +
			format.BOLD + filename.replace(/\/\//, "/") + format.RESET +
			': Compiled in ' + (Date.now() - t) + 'ms.'
		);

		if (filename === '-') {
			console.log(output);
		} else {
			fs.writeFileSync(filename, output, args["encoding"] || 'UTF-8');
		}
	}
	//Catch compile errors and manually output, highlight, etc.
	catch(e){
		//Get error line number
		var lineno = /lineno:\s*(\d+)/i.exec(e.message);
		if (lineno && lineno.length == 2) {
			lineno = (+lineno[1] - 1) || -1;
		}
		else {
			lineno = -1;
		}

		//Format the error message
		e.message = e.message.replace(/\s*filename:\s*,?/i, "");
		e.message = e.message.replace(/lineno:\s*/i, format.BOLD + "line " + format.RESET);

		//Highlight the specific error character
		var errorCode = e.source,
			errorCodeBegin = errorCode.slice(0, e.cursor),
			errorCodeHighlight = errorCode.slice(e.cursor, e.cursor + 1);
			errorCodeEnd   = errorCode.slice(e.cursor + 1, errorCode.length);

		errorCode = errorCodeBegin +
					format.RED + errorCodeHighlight + format.RESET +
					errorCodeEnd;

		errorCode = errorCode.split(/[\r\n]/gm);

		//Get error character relative to error line
		var errorLineChar = Math.max(
			e.cursor - errorCode.slice(0, lineno).join("\n").length,
			-1
		);

		//Format error code
		errorCode = errorCode.map(function(lineCode, index) {
			var indent = "        ";

			//Highlight the indent for error lines
			if (index == lineno) {
				indent = format.REDBG + "        " + format.RESET;
			}

			return indent + (index + 1) + ". " + lineCode;
		});

		//Get only the nearest lines for an error rather than outputting entire
		//source code
		var beginLine = Math.max(0, lineno - 5),
			endLine = Math.min(lineno + 5, errorCode.length);
		errorCode = errorCode.slice(beginLine, endLine);

		//Display the error message
		console.log(
			'[' + format.RED + 'ERROR' + format.RESET + '] ' +
			(e.message || "") +
			format.BOLD + " char " + format.RESET + errorLineChar + "\n"
		);
		console.log("        " + format.BOLD + "Filename" + format.RESET + ": " + args["$!stray"]);
		console.log("        " + format.BOLD + "Source Code" + format.RESET + ": \n");

		console.log(errorCode.join("\n"));
	}
}

var files = args['$!stray'].map(function(f){
	var r = new Dummy;
	if (f === '-') {
		process.stdin.resume();
		process.stdin.on('data', function (data) {
			r.r += String(data);
		});
		process.stdin.on('end', ready);
	} else {
		fs.readFile(f, args["encoding"] || 'UTF-8', function(e, data) {
			if (e) throw "Reading file '" + f + "' failed.";

			r.r = String(data);
			ready();
		});
	}
	return r;
});
